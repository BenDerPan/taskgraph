// Code generated by protoc-gen-go.
// source: channel.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	channel.proto

It has these top-level messages:
	Tag
	Data
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Tag struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto1.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}

type Data struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto1.CompactTextString(m) }
func (*Data) ProtoMessage()    {}

func init() {
}

// Client API for Channel service

type ChannelClient interface {
	GetData(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Data, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) GetData(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := grpc.Invoke(ctx, "/proto.Channel/GetData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Channel service

type ChannelServer interface {
	GetData(context.Context, *Tag) (*Data, error)
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_GetData_Handler(srv interface{}, ctx context.Context, buf []byte) (proto1.Message, error) {
	in := new(Tag)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServer).GetData(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _Channel_GetData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
